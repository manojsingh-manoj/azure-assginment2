name: Build and Push to Azure Container Registry

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      # Login to Azure using OIDC
      - name: Azure Login
        # uses: azure/login@v2
        # with:
        #   client-id: ${{ secrets.AZURE_AD_CLIENT_ID }}
        #   tenant-id: ${{ secrets.AZURE_AD_TENANT_ID }}
        #   subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.AZURE_AD_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_AD_TENANT_ID }}"}'

      # Login to Azure Container Registry
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Extract metadata for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.ACR_REGISTRY_NAME }}.azurecr.io/simple-node-app
          tags: |
            type=raw,value=v${{ github.run_number }}
            
      # Build and push Docker image with caching
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy to VM
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VM_IP }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            docker pull ${{ secrets.ACR_REGISTRY_NAME }}.azurecr.io/simple-node-app:v${{ github.run_number }}
            docker stop simple-node-app || true
            docker rm simple-node-app || true
            docker run -d --name simple-node-app -p 3000:3000 -e VERSION=${{github.run_number}} -e APPINSIGHTS_INSTRUMENTATIONKEY=${{secrets.APPINSIGHTS_INSTRUMENTATIONKEY}} ${{ secrets.ACR_REGISTRY_NAME }}.azurecr.io/simple-node-app:v${{ github.run_number }}

      - name: Wait for 2 minutes
        run: |
          echo "Waiting for 2 minutes before proceeding..."
          sleep 120
          echo "Resuming execution."

      - name: Query Application Insights for ErrorEvent counts
        id: ai_query
        uses: wictorwilen/application-insights-action@v1
        with:
          app_insights_connection_string: ${{ secrets.APPINSIGHTS_CONNECTION_STRING }}
          query: |
            let currentVersion = "${{ github.ref_name }}";
            let releases = customEvents
              | where name == "ErrorEvent"
              | where timestamp > ago(1d)
              | summarize errorCount = count() by version = tostring(customDimensions.version), bin(timestamp, 1h)
              | summarize errorCount = max(errorCount) by version
              | order by version desc;

            let currentErrorCount = toscalar(releases | where version == currentVersion | project errorCount);
            let previousErrorCount = toscalar(releases | where version != currentVersion | top 1 by version desc | project errorCount);

            print isCurrentGreater = currentErrorCount > previousErrorCount

      - name: Print error counts
        run: |
          echo "Raw Result:"
          echo '${{ steps.ai_query.outputs.result }}'

          echo "Parsed Values:"
          echo "Current Error Count: $(echo '${{ steps.ai_query.outputs.result }}' | jq -r '.[0].currentErrorCount')"
          echo "Previous Error Count: $(echo '${{ steps.ai_query.outputs.result }}' | jq -r '.[0].previousErrorCount')"
          echo "Is Current Greater: $(echo '${{ steps.ai_query.outputs.result }}' | jq -r '.[0].isCurrentGreater')"